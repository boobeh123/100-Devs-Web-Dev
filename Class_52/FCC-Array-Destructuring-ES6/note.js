/**************************************************************
* A brief introduction to array destructuring in ES6
***************************************************************/
/*

Destructuring in JavaScript is a simplified method 
of extracting multiple properties from an array by taking the structure 
and deconstructing it down into its own constituent parts through assignments 
by using a syntax that looks similar to array literals.

It creates a pattern 
that describes the kind of value you are expecting and makes the assignment. 
Array destructuring uses position.

Numbers cannot be variable names and cannot be used for destructuring.

Destructuring has made extracting data from an array very simple and readable.
Imagine trying to extract data from a nested array with 5 or 6 levels. 
You use an array literal on the left-hand side of the assignment.

It takes each variable on the array literal on the left-hand side 
and maps it to the same element at the same index in the array.

Declaration and assignment can be done separately in destructuring.

If the number of variables passed to the destructuring array literals 
are more than the elements in the array, 
then the variables which arenâ€™t mapped to any element in the array 
return undefined.

If the number of variables passed to the destructuring array literals 
are lesser than the elements in the array, 
the elements without variables to be mapped to are just left. 
There are no errors whatsoever.

*/

// With Destructuring
let [first, second, third] = ['Hello', 'world', 'olleh']
console.log(first)  // Output -> Hello
console.log(second) // Output -> world
console.log(third)  // Output -> olleh
let thing = ['Hello', 'world', 'olleh']
let [a, b, c] = thing;
console.log(thing)  // Output -> ['Hello', 'world', 'olleh']
console.log(a)      // Output -> Hello
console.log(b)      // Output -> world
console.log(c)      // Output -> olleh

// Without array literal brackets []
let first, second, third = ['Hello', 'world', 'olleh']
console.log(first)  // Output -> undefined
console.log(second) // Output -> undefined
console.log(third)  // Output -> ['Hello', 'world', 'olleh']

// Without destructuring
let first = 'Hello',
    second = 'world',
    third = 'olleh'
console.log(first)  // Output -> Hello
console.log(second) // Output -> world
console.log(third)  // Output -> olleh  

// Using Numbers as variable names 
let [1, 2, 3] = ['Hello', 'world', 'olleh'] // Output -> SyntaxError: Invalid destructuring assignment target

// Declaration & Assignment done seperately
let a, b;
[a, b] = ['olleh', 'dlrow']
console.log(a)      // Output -> olleh
console.log(b)      // Output -> dlrow

// Declaring more variables than elements exist
let things = ["hello", "world", "olleh", "dlrow"];
let [a, b, c, d, e] = things;
console.log(c);     //Output: olleh
console.log(d);     //Output: dlrow
console.log(e);     //Output: undefined
/**************************************************************
* A brief introduction to array destructuring in ES6
***************************************************************/




/**************************************************************
* Destructuring Returned Arrays
***************************************************************/
/*
*/
/**************************************************************
* Destructuring Returned Arrays
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




/**************************************************************
*
***************************************************************/
/*
*/
/**************************************************************
*
***************************************************************/




